#!/usr/bin/env -S scala-cli shebang --java-opt=-Xmx1500m --server=false

//> using scala "3.3.4"
//> using dep "com.mchange::unify-rss:0.0.5"

import java.net.URL
import java.nio.file.{Path as JPath}
import scala.collection.*
import unstatic.UrlPath.*
import scala.xml.*
import scala.xml.transform.*

import audiofluidity.rss.*

import com.mchange.unifyrss.*

object SubscribedPodcasts:

  private val FeedCoverUrl = "https://www.interfluidity.com/uploads/2023/08/ripply-river-midjourney-smaller.png"

  private def feedCoverCoverImageElement =
    val urlElement = Element.Url(location=FeedCoverUrl)
    val titleElement = Element.Title(text=SubscribedPodcastsFeed.title(Nil))
    val linkElement = Element.Link(location="https://www.interfluidity.com/")
    val descElement = Element.Description(text=SubscribedPodcastsFeed.description(Nil))
    Element.Image(urlElement,titleElement,linkElement,None,None,Some(descElement))

  private def prefixTitlesOfItemElem(prefix: String, itemElem: Elem): Elem =
    val oldTitleElems = (itemElem \ "title")
    if oldTitleElems.nonEmpty then
      val newChildren = itemElem.child.map: node =>
        if !oldTitleElems.contains(node) then node
        else
          val oldTitleElem = node.asInstanceOf[Elem]
          oldTitleElem.copy(child = Seq(Text(prefix + oldTitleElem.text)))
      itemElem.copy(child = newChildren)
    else
      itemElem.copy(child = itemElem.child :+ Elem("", "title", Null, TopScope, true, Text(prefix + "Untitled Item")))

  private val PrefixTransformations = Map("Podcasts" -> "TAP")

  private def prependFeedTitleToItemTitles(rssElem: Elem): Elem =
    val feedPrefix =
      val queryResult = (rssElem \ "channel").map(_ \ "title")
      if queryResult.nonEmpty then
        val rawPrefix = queryResult.head.text.trim
        val goodPrefix = PrefixTransformations.getOrElse(rawPrefix, rawPrefix)
        (goodPrefix + ": ")
      else
        ""
    val rule = new RewriteRule:
      override def transform(n: Node): Seq[Node] = n match
        case elem: Elem if elem.label == "item" => prefixTitlesOfItemElem(feedPrefix, elem)
        case other => other
    val transform = new RuleTransformer(rule)
    transform(rssElem).asInstanceOf[Elem]

  private def copyItunesImageElementsToItems(rssElem: Elem): Elem =
    val mbItunesFeedImage =
      val queryResult = (rssElem \ "channel").flatMap(_ \ "image").filter(_.asInstanceOf[Elem].prefix == "itunes")
      if queryResult.nonEmpty then Some(queryResult.head) else None
    val mbRegularFeedImage =
      val queryResult = (rssElem \ "channel").flatMap(_ \ "image").filter(_.asInstanceOf[Elem].prefix == null)
      if queryResult.nonEmpty then Some(queryResult.head) else None
    val mbFeedImage = mbItunesFeedImage orElse mbRegularFeedImage.map: regularImageElem =>
      val url = (regularImageElem \ "url").head.text.trim
      Element.Itunes.Image(href = url).toElem
    mbFeedImage.fold(rssElem): feedImage =>
      val rule = new RewriteRule:
        override def transform(n: Node): Seq[Node] = n match
          case elem: Elem if elem.label == "item" =>
            if (elem \ "image").isEmpty then
              elem.copy(child = elem.child :+ feedImage.asInstanceOf[Elem])
            else
              elem
          case other => other
      val transform = new RuleTransformer(rule)
      transform(rssElem).asInstanceOf[Elem]

  private def stripItunesSeason( rssElem : Elem ) : Elem =
    val rule = new RewriteRule:
      override def transform(n: Node): Seq[Node] = n match
        case elem: Elem if elem.label == "season" && elem.prefix == "itunes" => NodeSeq.Empty
        case other => other
    val transform = new RuleTransformer(rule)
    transform(rssElem).asInstanceOf[Elem]

  private def profile[I,O](label:String)(fcn : I => O) : I => O = (input : I) =>
    val start = System.currentTimeMillis()
    val out = fcn(input)
    println(s"${label}: ${System.currentTimeMillis()-start} msecs")
    out

  private val embellishFeed : Elem => Elem =
    profile("embellish")(
      stripItunesSeason andThen prependFeedTitleToItemTitles andThen copyItunesImageElementsToItems
    )

  def bestAttemptEmbellish(anyTopElem: Elem): Elem =
    val rssElem: Option[Elem] = anyTopElem.label match
      case "rss" => Some(anyTopElem)
      case "feed" if util.scopeContains(null, "http://www.w3.org/2005/Atom", anyTopElem.scope) => Some(atom.rssElemFromAtomFeedElem(anyTopElem))
      case _ => None
    rssElem.fold(anyTopElem)(embellishFeed)

  def addFeedImageElement(rssElem : Elem) : Elem =
    val rule = new RewriteRule:
      override def transform(n: Node): Seq[Node] = n match
        case elem: Elem if elem.label == "channel" => elem.copy( child = feedCoverCoverImageElement.toElem +: elem.child )
        case other => other
    val transform = new RuleTransformer(rule)
    transform(rssElem).asInstanceOf[Elem]


  // there is no need or point to this. NPR helpfully keeps only one news headline item in their feed.
  // i see a zillion copies in Inoreader only because inoreader retains everything it has seen
  /*
  def onlyMostRecentNPRNewsInOutput( outputElem : Elem ) : Elem =
    val allNprNewsItems = (outputElem \\ "item").filter( item => (item \ "title").foldLeft("")( (accum, next) => accum + next.text ).indexOf("NPR News:") >= 0 )
    if allNprNewsItems.nonEmpty then
      val topNprNewsItem = allNprNewsItems.head
      val deleteAllNprNewsButTopRule = new RewriteRule:
        override def transform(n: Node): Seq[Node] = n match
          case elem: Elem if allNprNewsItems.contains(elem) && elem != topNprNewsItem => NodeSeq.Empty
          case other => other
      val transform = new RuleTransformer(deleteAllNprNewsButTopRule)
      transform( outputElem ).asInstanceOf[Elem]
    else
      outputElem
  */
end SubscribedPodcasts

val allBlogs = immutable.Seq(
  SourceUrl("https://drafts.interfluidity.com/feed/index.rss"),
  SourceUrl("https://tech.interfluidity.com/feed/index.rss"),
  SourceUrl("https://www.interfluidity.com/feed"),
  SourceUrl("https://www.sbt-ethereum.io/blog/atom.xml"),
)

val allMicroblogs = immutable.Seq(
  SourceUrl("https://zirk.us/@interfluidity.rss"),
  SourceUrl("https://econtwitter.net/@interfluidity.rss"),
  SourceUrl("https://fosstodon.org/@interfluidity.rss"),
)

val allBlogsAndMicroblogs = allBlogs ++ allMicroblogs

val everything = allBlogs ++ allBlogsAndMicroblogs ++ immutable.Seq(
  SourceUrl("https://github.com/swaldman.atom"),
)

val subscribedPodcastsMetaSources = immutable.Seq(
  MetaSource.OPML(URL("https://www.inoreader.com/reader/subscriptions/export/user/1005956602/label/Podcasts"), eachFeedTransformer = SubscribedPodcasts.bestAttemptEmbellish),
  MetaSource.OPML(URL("https://www.inoreader.com/reader/subscriptions/export/user/1005956602/label/Podcasts+HF"), eachFeedTransformer = SubscribedPodcasts.bestAttemptEmbellish),
)

val daveWinerAllMetaSources = immutable.Seq(
  MetaSource.OPML(URL("https://feedland.com/opml?screenname=davewiner&catname=All"))
)

val AllBlogsFeed = new MergedFeed.Default(baseName = "all-blogs", sourceUrls = allBlogs, itemLimit = 25):
  override def title(rootElems: immutable.Seq[Elem]): String = "interfluidity, all blogs"
  override def description(rootElems: immutable.Seq[Elem]): String = "Collects posts to all blogs (including the main interfluidity.com, as well as drafts.interfluidity.com and tech.interfluiduty.com) by Steve Randy Waldman"

val AllMicroblogsFeed = new MergedFeed.Default(baseName = "all-microblogs", sourceUrls = allMicroblogs, itemLimit = 25):
  override def title(rootElems: immutable.Seq[Elem]): String = "interfluidity, all microblogs"
  override def description(rootElems: immutable.Seq[Elem]): String = "Collects posts to all Steve Randy Waldman's microblog feeds"

val AllBlogsAndMicroblogsFeed = new MergedFeed.Default(baseName = "all-blogs-and-microblogs", sourceUrls = allBlogsAndMicroblogs, itemLimit = 100):
  override def title(rootElems: immutable.Seq[Elem]): String = "interfluidity, all blogs and microblogs"
  override def description(rootElems: immutable.Seq[Elem]): String = "Collects posts to all blogs and microblogs by Steve Randy Waldman (interfludity), as well as posts to microblogs that syndicate by RSS."

val EverythingFeed = new MergedFeed.Default(baseName = "everything", sourceUrls = everything, itemLimit = 100):
  override def title(rootElems: immutable.Seq[Elem]): String = "interfluidity, everything"
  override def description(rootElems: immutable.Seq[Elem]): String = "Tracks posts to all blogs and microblogs, as well as other activity, by Steve Randy Waldman (interfludity), as well as posts to microblogs that syndicate by RSS."

val SubscribedPodcastsFeed = new MergedFeed.Default(baseName = "subscribed-podcasts", metaSources = subscribedPodcastsMetaSources, itemLimit = 100, refreshSeconds = 1800, outputTransformer = SubscribedPodcasts.addFeedImageElement):
  override def title(rootElems: immutable.Seq[Elem]): String = "interfluidity, subscribed podcasts"
  override def description(rootElems: immutable.Seq[Elem]): String = "Tracks the podcasts to which Steve Randy Waldman is subscribed by RSS, to avoid siloing subscriptions in some single app."

val DaveWinerAllFeed = new MergedFeed.Default(baseName = "dave-winer-all", metaSources = daveWinerAllMetaSources, itemLimit = 100, refreshSeconds = 1800):
  override def title(rootElems: immutable.Seq[Elem]): String = "Dave Winer subscriptions"
  override def description(rootElems: immutable.Seq[Elem]): String = "Tracks feeds Dave Winer subscribes to, discovered via http://news.scripting.com/."

val staticGenConfig =
  StaticGenConfig(
    appPathAbs = Abs("https://www.interfluidity.com/unify-rss"),
    appStaticDir = JPath.of("/home/web/public/unify-rss-interfluidity"),
    mergedFeeds = immutable.Set(AllBlogsFeed, AllMicroblogsFeed, AllBlogsAndMicroblogsFeed, EverythingFeed, SubscribedPodcastsFeed, DaveWinerAllFeed),
    verbose = true
  )

ScriptEntry.performStaticGen( staticGenConfig )
